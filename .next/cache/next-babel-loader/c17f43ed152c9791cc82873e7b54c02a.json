{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    // tells apollo we will take care of everything\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      // console.log({ existing, args, cache });\n      var skip = args.skip,\n          first = args.first; // Read the number of items on the page from the cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first); // Check if we have existing items\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      }); // If\n      // There are items\n      // AND there aren't enough items to satisfy how many were requested\n      // AND we are on the last page\n      // THEN JUST SEND IT\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        // We don't have any items, we must go to the network to fetch them\n        return false;\n      } // If there are items, just reutrn them from the cache, and we don't need to go to the network\n\n\n      if (items.length) {\n        // console.log(\n        //   `There are ${items.length} items in the cache! Gonna send them to apollo`\n        // );\n        return items;\n      }\n\n      return false; // fallback to network\n      // First thing it does it asks the read function for those items.\n      // We can either do one of two things:\n      // First things we can do is return the items because they are already in the cache\n      // The other thing we can do is to return false from here, (network request)\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      var skip = args.skip,\n          first = args.first; // This runs when the Apollo client comes back from the network with our product\n      // console.log(`MErging items from the network ${incoming.length}`);\n\n      var merged = existing ? existing.slice(0) : [];\n\n      for (var i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      } // console.log(merged);\n      // Finally we return the merged items from the cache,\n\n\n      return merged;\n    }\n  };\n}","map":{"version":3,"sources":["D:/Ataire/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;AACW;AAChBC,IAAAA,IAFK,kBAEgC;AAAA;;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AACnC;AADmC,UAE3BC,IAF2B,GAEXF,IAFW,CAE3BE,IAF2B;AAAA,UAErBC,KAFqB,GAEXH,IAFW,CAErBG,KAFqB,EAInC;;AACA,UAAMC,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,UAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARmC,CAUnC;;AACA,UAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd,CAXmC,CAYnC;AACA;AACA;AACA;AACA;;AAEA,UAAIH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,KAAvD,EAA8D;AAC5D,eAAOG,KAAP;AACD;;AACD,UAAIA,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B;AACA,eAAO,KAAP;AACD,OAxBkC,CA0BnC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChB;AACA;AACA;AACA,eAAOJ,KAAP;AACD;;AAED,aAAO,KAAP,CAlCmC,CAkCrB;AAEd;AACA;AACA;AACA;AACD,KA1CI;AA2CLK,IAAAA,KA3CK,iBA2CCnB,QA3CD,EA2CWoB,QA3CX,SA2C+B;AAAA,UAARnB,IAAQ,SAARA,IAAQ;AAAA,UAC1BE,IAD0B,GACVF,IADU,CAC1BE,IAD0B;AAAA,UACpBC,KADoB,GACVH,IADU,CACpBG,KADoB,EAElC;AACA;;AACA,UAAMiB,MAAM,GAAGrB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,WAAK,IAAIO,CAAC,GAAGnB,IAAb,EAAmBmB,CAAC,GAAGnB,IAAI,GAAGiB,QAAQ,CAACF,MAAvC,EAA+C,EAAEI,CAAjD,EAAoD;AAClDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGnB,IAAL,CAApB;AACD,OAPiC,CAQlC;AACA;;;AACA,aAAOkB,MAAP;AACD;AAtDI,GAAP;AAwDD","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\r\n\r\nexport default function paginationField() {\r\n  return {\r\n    keyArgs: false, // tells apollo we will take care of everything\r\n    read(existing = [], { args, cache }) {\r\n      // console.log({ existing, args, cache });\r\n      const { skip, first } = args;\r\n\r\n      // Read the number of items on the page from the cache\r\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\r\n      const count = data?._allProductsMeta?.count;\r\n      const page = skip / first + 1;\r\n      const pages = Math.ceil(count / first);\r\n\r\n      // Check if we have existing items\r\n      const items = existing.slice(skip, skip + first).filter((x) => x);\r\n      // If\r\n      // There are items\r\n      // AND there aren't enough items to satisfy how many were requested\r\n      // AND we are on the last page\r\n      // THEN JUST SEND IT\r\n\r\n      if (items.length && items.length !== first && page === pages) {\r\n        return items;\r\n      }\r\n      if (items.length !== first) {\r\n        // We don't have any items, we must go to the network to fetch them\r\n        return false;\r\n      }\r\n\r\n      // If there are items, just reutrn them from the cache, and we don't need to go to the network\r\n      if (items.length) {\r\n        // console.log(\r\n        //   `There are ${items.length} items in the cache! Gonna send them to apollo`\r\n        // );\r\n        return items;\r\n      }\r\n\r\n      return false; // fallback to network\r\n\r\n      // First thing it does it asks the read function for those items.\r\n      // We can either do one of two things:\r\n      // First things we can do is return the items because they are already in the cache\r\n      // The other thing we can do is to return false from here, (network request)\r\n    },\r\n    merge(existing, incoming, { args }) {\r\n      const { skip, first } = args;\r\n      // This runs when the Apollo client comes back from the network with our product\r\n      // console.log(`MErging items from the network ${incoming.length}`);\r\n      const merged = existing ? existing.slice(0) : [];\r\n      for (let i = skip; i < skip + incoming.length; ++i) {\r\n        merged[i] = incoming[i - skip];\r\n      }\r\n      // console.log(merged);\r\n      // Finally we return the merged items from the cache,\r\n      return merged;\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}